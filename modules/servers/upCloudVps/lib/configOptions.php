<?php

namespace WHMCS\Module\Server\upCloudVps;

if (!defined('WHMCS')) {
    die('This file cannot be accessed directly');
}

use WHMCS\Database\Capsule;
use WHMCS\Module\Server\upCloudVps\upCloudVps;
use WHMCS\Module\Server\upCloudVps\Helper;
use WHMCS\Product\Product;
use App;

class configOptions
{
    private $manager;
    private $params;
    private $_LANG;
    public function __construct(array $params)
    {
        $this->manager = new upCloudVps($params);
        $this->params = $params;
        $this->_LANG = Helper::getLang();
    }

    public function configs()
    {
        $product = Product::find(App::getFromRequest('id'));
        if (App::getFromRequest('action') == 'save') {
            $this->ensureCustomFields($product);
            $this->createLinuxCloudInitConfigurableOptions($product);
            $this->createLinuxNativeConfigurableOptions($product);
            $this->createWindowsNativeConfigurableOptions($product);
            $this->createBackupLocationConfigurableOptions($product);
            $this->createCustomConfigurableOptions($product);
        } // Save End

        return [
            'Default Location' => ['Type' => 'dropdown', 'Options' => $this->getZoneLocation()],
            'Plan' => ['Type' => 'dropdown', 'Options' => $this->getVmplans()],
            'Template' => ['Type' => 'dropdown', 'Options' => $this->getTemplateIds()],
        ];
    }

    private function createCustomConfigurableOptions($product)
    {
        $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;
        $currencyCode = Capsule::table('tblcurrencies')->where('default', '1')->first()->code;
        $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud - custom plans')->first()->id;
        if (!$groupId) {
            $groupId = Capsule::table('tblproductconfiggroups')->insertGetId(['name' => 'Configurable options for UpCloud - custom plans', 'description' => 'Auto generated by upCloudVps module']);
            $groupIdLinks = Capsule::table('tblproductconfiglinks')->where('gid', $groupId)->where('pid', $product->id)->first()->gid;
            if (!$groupIdLinks) {
                Capsule::table('tblproductconfiglinks')->insert(['gid' => $groupId, 'pid' => $product->id]);
            }
            $this->createRAMFields($groupId, $currencyId, $currencyCode);
            $this->createCPUFields($groupId, $currencyId, $currencyCode);
            $this->createStorageFields($groupId, $currencyId, $currencyCode);
        }
    }

    private function createLinuxCloudInitConfigurableOptions($product)
    {
        $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud - Linux (cloud-init template)')->first()->id;
        $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;
        $currencyCode = Capsule::table('tblcurrencies')->where('default', '1')->first()->code;
        if (!$groupId) {
            $groupId = Capsule::table('tblproductconfiggroups')->insertGetId(['name' => 'Configurable options for UpCloud - Linux (cloud-init template)', 'description' => 'Auto generated by upCloudVps module']);
            $groupIdLinks = Capsule::table('tblproductconfiglinks')->where('gid', $groupId)->where('pid', $product->id)->first()->gid;
            if (!$groupIdLinks) {
                Capsule::table('tblproductconfiglinks')->insert(['gid' => $groupId, 'pid' => $product->id]);
            }
            $pomTemplates = $this->getTemplateIds('cloudinit');
            $this->createTemplateFields($groupId, $pomTemplates, $currencyId, $currencyCode);
        }
    }

    private function createLinuxNativeConfigurableOptions($product)
    {
        $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud - Linux (native template)')->first()->id;
        $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;
        $currencyCode = Capsule::table('tblcurrencies')->where('default', '1')->first()->code;
        if (!$groupId) {
            $groupId = Capsule::table('tblproductconfiggroups')->insertGetId(['name' => 'Configurable options for UpCloud - Linux (native template)', 'description' => 'Auto generated by upCloudVps module']);
            $groupIdLinks = Capsule::table('tblproductconfiglinks')->where('gid', $groupId)->where('pid', $product->id)->first()->gid;
            if (!$groupIdLinks) {
                Capsule::table('tblproductconfiglinks')->insert(['gid' => $groupId, 'pid' => $product->id]);
            }
            $pomTemplates = $this->getTemplateIds('nativelinux');
            $this->createTemplateFields($groupId, $pomTemplates, $currencyId, $currencyCode);
        }
    }

    private function createWindowsNativeConfigurableOptions($product)
    {
        $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud - Windows (native template)')->first()->id;
        $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;
        $currencyCode = Capsule::table('tblcurrencies')->where('default', '1')->first()->code;
        if (!$groupId) {
            $groupId = Capsule::table('tblproductconfiggroups')->insertGetId(['name' => 'Configurable options for UpCloud - Windows (native template)', 'description' => 'Auto generated by upCloudVps module']);
            $groupIdLinks = Capsule::table('tblproductconfiglinks')->where('gid', $groupId)->where('pid', $product->id)->first()->gid;
            if (!$groupIdLinks) {
                Capsule::table('tblproductconfiglinks')->insert(['gid' => $groupId, 'pid' => $product->id]);
            }
            $pomTemplates = $this->getTemplateIds('nativewindows');
            $this->createTemplateFields($groupId, $pomTemplates, $currencyId, $currencyCode);
        }
    }

    private function createBackupLocationConfigurableOptions($product)
    {
        $currencyId = Capsule::table('tblcurrencies')->where('default', '1')->first()->id;
        $currencyCode = Capsule::table('tblcurrencies')->where('default', '1')->first()->code;
        $groupId = Capsule::table('tblproductconfiggroups')->where('name', 'Configurable options for UpCloud - backup and location')->first()->id;
        if (!$groupId) {
            $groupId = Capsule::table('tblproductconfiggroups')->insertGetId(['name' => 'Configurable options for UpCloud - backup and location', 'description' => 'Auto generated by upCloudVps module']);
            $groupIdLinks = Capsule::table('tblproductconfiglinks')->where('gid', $groupId)->where('pid', $product->id)->first()->gid;
            if (!$groupIdLinks) {
                Capsule::table('tblproductconfiglinks')->insert(['gid' => $groupId, 'pid' => $product->id]);
            }
            $this->createBackupFields($groupId, $this->getBackups());
            $this->createLocationFields($groupId, $this->getZoneLocation(), $currencyId);
        }
    }

    private function createBackupFields($groupId, $backup)
    {
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'backup|Backup')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'backup|Backup', 'optiontype' => 1]);
            foreach ($backup as $id => $val) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $id . '|' . $val], ['configid' => $optionId]);
            }
        }
    }

    private function createRAMFields($groupId, $currencyId, $currencyCode)
    {
        $mems = array();
        for ($i = 4; $i <= 64; $i += 1) {
            $mems["$i"] = "$i Gigabyte (GB)";
        }
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'ram|Memory (RAM)')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'ram|Memory (RAM)', 'optiontype' => 1]);
            foreach ($mems as $mem => $mvals) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $mem . '|' . $mvals], ['configid' => $optionId]);
            }
            foreach (Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get() as $id) {
                $parts = explode('|', $id->optionname);
                $fprice = $parts[0] * '2';
                $monthlys = $this->manager->CurrencyConvert('EUR', $currencyCode, $fprice);
                Capsule::table('tblpricing')->updateOrInsert(['type' => 'configoptions', 'relid' => $id->id, 'monthly' => $monthlys['convertedAmount']], ['currency' => $currencyId]);
            }
        }
    }

    private function createCPUFields($groupId, $currencyId, $currencyCode)
    {
        $cpus = array();
        for ($i = 2; $i <= 24; $i += 1) {
            $cpus["$i"] = "$i Core vCPU";
        }
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'vcpu|vCPU')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'vcpu|vCPU', 'optiontype' => 1]);
            foreach ($cpus as $cpu => $cvals) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $cpu . '|' . $cvals], ['configid' => $optionId]);
            }
            foreach (Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get() as $id) {
                $parts = explode('|', $id->optionname);
                $fprice = $parts[0] * '6';
                $monthlys = $this->manager->CurrencyConvert('EUR', $currencyCode, $fprice);
                Capsule::table('tblpricing')->updateOrInsert(['type' => 'configoptions', 'relid' => $id->id, 'monthly' => $monthlys['convertedAmount']], ['currency' => $currencyId]);
            }
        }
    }

    private function createStorageFields($groupId, $currencyId, $currencyCode)
    {
        $storages = array();
        for ($i = 50; $i <= 460; $i += 10) {
            $storages["$i"] = "$i Gigabyte (GB)";
        }
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'storage|Storage')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'storage|Storage', 'optiontype' => 1]);
            foreach ($storages as $storage => $vals) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $storage . '|' . $vals], ['configid' => $optionId]);
            }
            foreach (Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get() as $id) {
                $parts = explode('|', $id->optionname);
                $fprice = $parts[0] * '0.10';
                $monthlys = $this->manager->CurrencyConvert('EUR', $currencyCode, $fprice);
                Capsule::table('tblpricing')->updateOrInsert(['type' => 'configoptions', 'relid' => $id->id, 'monthly' => $monthlys['convertedAmount']], ['currency' => $currencyId]);
            }
        }
    }

    private function createTemplateFields($groupId, $pomTemplates, $currencyId, $currencyCode)
    {
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'template|Template')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'template|Template', 'optiontype' => 1]);
            foreach ($pomTemplates as $id => $val) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $id . '|' . $val], ['configid' => $optionId]);
            }
            foreach (Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get() as $id) {
                if (strpos($id->optionname, 'Datacenter') !== false) {
                    $monthlys = $this->manager->CurrencyConvert('EUR', $currencyCode, '25');
                } elseif (strpos($id->optionname, 'Standard') !== false) {
                    $monthlys = $this->manager->CurrencyConvert('EUR', $currencyCode, '10');
                } else {
                    $monthlys['convertedAmount'] = '0.00';
                }
                Capsule::table('tblpricing')->updateOrInsert(['type' => 'configoptions', 'relid' => $id->id, 'monthly' => $monthlys['convertedAmount']], ['currency' => $currencyId]);
            }
        }
    }

    private function createLocationFields($groupId, $zones, $currencyId)
    {
        $optionId = Capsule::table('tblproductconfigoptions')->where('gid', $groupId)->where('optionname', 'location|Location')->first()->id;
        if (!$optionId) {
            $optionId = Capsule::table('tblproductconfigoptions')->insertGetId(['gid' => $groupId, 'optionname' => 'location|Location', 'optiontype' => 1]);
            foreach ($zones as $zon => $val) {
                Capsule::table('tblproductconfigoptionssub')->updateOrInsert(['optionname' => $zon . '|' . $val], ['configid' => $optionId]);
            }
            foreach (Capsule::table('tblproductconfigoptionssub')->where('configid', $optionId)->get() as $id) {
                Capsule::table('tblpricing')->updateOrInsert(['type' => 'configoptions', 'relid' => $id->id], ['currency' => $currencyId]);
            }
        }
    }

    private function ensureCustomFields($product)
    {
        $customFields = [
            ['fieldname' => 'ssh_key|SSH Public Key', 'fieldtype' => 'textarea', 'description' => $this->_LANG['sshRsa'], 'regexpr' => '#^(ssh-(rsa|dss|ed25519)|ecdsa-sha2-nistp(256|384|521)|sk-(ssh-ed25519|ecdsa-sha2-nistp256)@openssh\.com) AAAA[0-9A-Za-z+/]+[=]{0,3}( .*)?$#', 'showorder' => 'on'],
            ['fieldname' => 'instanceId|instance Id', 'fieldtype' => 'text', 'adminonly' => 'on'],
            ['fieldname' => 'userData|User Data', 'fieldtype' => 'textarea', 'description' => $this->_LANG['userData'], 'showorder' => 'on']
        ];
        foreach ($customFields as $field) {
            if (empty(Capsule::table('tblcustomfields')->where('fieldname', $field['fieldname'])->where('relid', $product->id)->value('relid'))) {
                Capsule::table('tblcustomfields')->updateOrInsert(['type' => 'product', 'relid' => $product->id] + $field);
            }
        }
    }

    private function getBackups()
    {
        $backups['no'] = 'Disable';
        $backups['daily'] = 'Daily (Day Plan)';
        $backups['dailies'] = 'Dailies (Week Plan)';
        $backups['weeklies'] = 'Weeklies (Month Plan)';
        $backups['monthlies'] = 'Monthlies (Year Plan)';
        return $backups;
    }


    private function getZoneLocation()
    {
        $zones = $this->manager->GetZones()['response']['zones']['zone'];
        $zoneLocation = [];
        foreach ($zones as $zone) {
            $zoneLocation[$zone['id']] = $zone['description'];
        }

        return $zoneLocation;
    }

    private function getTemplateIds($vmtype = null)
    {
        $templates = $this->manager->GetTemplate()['response']['storages']['storage'];
        $templateIds = [];
        if (!$vmtype) {
            foreach ($templates as $template) {
                $templateIds[$template['uuid']] = $template['title'];
            }
        } else {
            foreach ($templates as $template) {
                if (
                    ($template['template_type'] == 'native' &&
                        (($vmtype == 'nativewindows' && preg_match('/Windows/', $template['title'])) ||
                            ($vmtype == 'nativelinux' && !preg_match('/Windows/', $template['title'])))) ||
                    $template['template_type'] == 'cloud-init' && $vmtype == 'cloudinit'
                ) {
                    $templateIds[$template['uuid']] = $template['title'];
                }
            }
        }
        return $templateIds;
    }

    private function getVmplans()
    {
        $plans = $this->manager->Getplans()['response']['plans']['plan'];
        $Vmplans = ['custom' => $this->_LANG['custom'] . ' [ ' . $this->_LANG['custDesc'] . ' ]'];
        foreach ($plans as $plan) {
            $PlanDesc = $this->_LANG['cpu'] . ': ' . $plan['core_number'] . ' ' . $this->_LANG['core'] . ' / ' . $this->_LANG['memory'] . ': '
                . $plan['memory_amount'] . $this->_LANG['MB'] . ' / ' . $this->_LANG['Disk'] . ': ' . $plan['storage_size'] . $this->_LANG['GB'];
            $Vmplans[$plan['name']] = $plan['name'] . ' [ ' . $PlanDesc . ' ]';
        }

        return $Vmplans;
    }
}
